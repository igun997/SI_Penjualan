/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package si_penjualan.views;

import java.awt.Color;
import java.awt.Component;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JTable;
import javax.swing.event.DocumentEvent;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;
import si_penjualan.entity.barang;
import si_penjualan.implement.barangimplement;
import si_penjualan.implement.penjualanimplement;

/**
 *
 * @author SystemFive
 */
public class v_pilih_barang extends javax.swing.JFrame {
    DefaultTableModel tabModel;
    barangimplement brgServe = new barangimplement();
    penjualanimplement pjServe = new penjualanimplement();
    /**
     * Creates new form v_pilih_barang
     */
    public v_pilih_barang() {
        initComponents();
        setTabel();
        cari();
    }
    private void cari()
    {
         txtCari.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
            public void insertUpdate(DocumentEvent e) {
               cari(txtCari.getText());
            }

            public void removeUpdate(DocumentEvent e) {
                // ketika teks diubah
                cari(txtCari.getText());
            }

            public void changedUpdate(DocumentEvent e) {
                // ketika teks diubah
                cari(txtCari.getText());
            }
        });
    }
    private void cari(String query)
    {
        System.out.println("Query := "+query);
        String value = txtCari.getText();
        for (int row = 0; row <= listBarang.getRowCount() - 1; row++) {
            for (int col = 0; col <= listBarang.getColumnCount() - 1; col++) {
                if (value.equals(listBarang.getValueAt(row, col))) {
                    // this will automatically set the view of the scroll in the location of the value
                    listBarang.scrollRectToVisible(listBarang.getCellRect(row, 0, true));
                    // this will automatically set the focus of the searched/selected row/value
                    listBarang.setRowSelectionInterval(row, row);
                    for (int i = 0; i <= listBarang.getColumnCount() - 1; i++) {
                        listBarang.getColumnModel().getColumn(i).setCellRenderer(new HighlightRenderer());
                    }
                }
            }
        }
    }
    private void getData()
    {
        
        int no = 0;
        try {
            List<barang> record = brgServe.getAll();
            int x = 0;
            for (barang brg : record) {
                String kode = brg.getKode();
                String nama = brg.getNamaBarang();
                double harga = Double.parseDouble(brg.getHarga());
                int jml = Integer.parseInt(brg.getJml());
                Object Data[]={kode,nama,harga,jml};
                tabModel.addRow(Data);
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(v_barang.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    private void setTabel()
    {
        String [] JudulKolom={"Kode Barang","Nama Barang","Harga","Stok"};
        tabModel = new DefaultTableModel(null, JudulKolom){
                  boolean[] canEdit = new boolean [] {false, false, false,false,false };
                  @Override
                  public boolean isCellEditable(int rowIndex, int columnIndex) {
                   return canEdit [columnIndex];
                  }
              };
        listBarang.setModel(tabModel);
        getData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listBarang = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtCari = new javax.swing.JTextField();
        btnPilih = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);

        listBarang.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(listBarang);

        jLabel1.setText("No Barang");

        txtCari.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                txtCariInputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        txtCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCariActionPerformed(evt);
            }
        });
        txtCari.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtCariPropertyChange(evt);
            }
        });

        btnPilih.setText("Pilih");
        btnPilih.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPilihActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtCari, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(173, 173, 173)
                .addComponent(btnPilih)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtCari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnPilih)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCariActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCariActionPerformed

    private void btnPilihActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPilihActionPerformed
        DefaultTableModel model = (DefaultTableModel) listBarang.getModel();
        int s = listBarang.getSelectedRow();
        v_pembelian vj = new v_pembelian();
        v_pembelian.SAkode_barang = model.getValueAt(s, 0).toString();
        v_pembelian.SAnama = model.getValueAt(s, 1).toString();
        v_pembelian.SAharga = model.getValueAt(s, 2).toString();
        v_pembelian.SAstok = model.getValueAt(s, 3).toString();
        v_pembelian.cek = 1;
        System.out.print("Param "+model.getValueAt(s, 0).toString());
        dispose();
        
    }//GEN-LAST:event_btnPilihActionPerformed

    private void txtCariInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_txtCariInputMethodTextChanged
        
    }//GEN-LAST:event_txtCariInputMethodTextChanged

    private void txtCariPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtCariPropertyChange
        System.out.print(txtCari.getText());
    }//GEN-LAST:event_txtCariPropertyChange

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(v_pilih_barang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(v_pilih_barang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(v_pilih_barang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(v_pilih_barang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new v_pilih_barang().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPilih;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable listBarang;
    private javax.swing.JTextField txtCari;
    // End of variables declaration//GEN-END:variables

    private static class HighlightRenderer extends DefaultTableCellRenderer {

         @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus,        int row, int column) {

            // everything as usual
            super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

            // added behavior
            if(row == table.getSelectedRow()) {

                // this will customize that kind of border that will be use to highlight a row
                setBorder(BorderFactory.createMatteBorder(2, 1, 2, 1, Color.BLACK));
            }

            return this;
        }
        
    }
}
